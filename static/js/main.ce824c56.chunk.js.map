{"version":3,"sources":["form/Fields/TextField.js","form/CustomField.js","App.js","serviceWorker.js","index.js"],"names":["TextFieldInput","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","initalValueSettings","defaultValue","value","state","_this2","_this$props","name","setFieldValue","onChangeCallback","placeholder","disabled","executeValuePropagation","react_default","a","createElement","className","type","onChange","e","setState","target","onBlur","onKeyPress","event","key","Component","CustomField","_ref","label","selectPropertie","displayPropertie","error","mask","selectItems","labelValueList","list","input","rows","editExibition","TextField","assign","id","defineProperty","htmlFor","PureComponent","defaultProps","FileDropzone","onDrop","acceptedFiles","rejectedFiles","readFile","es","getRootProps","getInputProps","isDragActive","concat","FormJson","InputForm","localProps","renderer","subname","obj","iteration","parentName","localInputName","console","log","form_CustomField","Array","isArray","map","nameField","index","keys","initialValues","formik_esm","onSubmit","values","_ref2","setSubmitting","submitFinish","JSON","stringify","_ref3","handleSubmit","isSubmitting","onClick","window","location","reload","App","file","fileReader","FileReader","onload","evt","content","result","jsonContent","parse","readAsText","text","element","document","setAttribute","encodeURIComponent","style","display","body","appendChild","click","removeChild","length","App_FormJson","App_FileDropzone","Boolean","hostname","match","ReactDOM","render","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ce824c56.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nclass TextFieldInput extends Component {\n  constructor (props) {\n    super(props)\n    const initalValueSettings = props.defaultValue ? props.defaultValue : props.value ? props.value : ''\n    this.state = { value: initalValueSettings }\n  }\n\n  render () {\n    const { name, setFieldValue, onChangeCallback, placeholder, disabled } = this.props\n\n    const executeValuePropagation = () => {\n      setFieldValue(name, this.state.value)\n      if (onChangeCallback && typeof onChangeCallback === 'function')\n          onChangeCallback(this.state.value)\n    }\n\n    const onBlur = () => executeValuePropagation()\n\n    const handleKeyPress = event => event.key === 'Enter' && executeValuePropagation()\n\n    return <div className='textfield'>\n      <input\n        placeholder={placeholder}\n        type='text'\n        value={ this.state.value }\n        onChange={e => this.setState({ value: e.target.value })}\n        onBlur={onBlur}\n        disabled={ disabled }\n        onKeyPress={ handleKeyPress } />\n    </div>\n  }\n}\n\nexport default TextFieldInput\n","import React, { PureComponent } from 'react'\nimport PropTypes from 'prop-types'\n\nimport TextField from './Fields/TextField'\n\nclass CustomField extends PureComponent {\n  render () {\n    const { name, type, selectPropertie, displayPropertie, label, placeholder, mask, error, selectItems, setFieldValue, value, labelValueList, list, onChangeCallback, defaultValue, disabled, rows, editExibition } = this.props\n    let input = <TextField\n          name={ name }\n          id={ name }\n          setFieldValue={ setFieldValue }\n          value={ value }\n          { ...{ name, placeholder, type, placeholder, disabled } } />\n\n    return <div className='input-field' >\n      { label && type !== \"radiogroup\" ? <label htmlFor={ name }>{ label }</label> : null }\n      { input }\n      { error ? <span className='error-label'>{ error }</span> : null }\n    </div>\n  }\n}\n\nCustomField.propTypes = {\n  name: PropTypes.string,\n  error: PropTypes.string\n}\n\nCustomField.defaultProps = {\n  name: '',\n  error: ''\n}\n\nexport default CustomField\n","import React, { Component } from 'react';\nimport './App.css';\nimport Dropzone from 'react-dropzone'\nimport { Formik } from 'formik'\nimport CustomField from './form/CustomField'\n\nclass FileDropzone extends Component {\n\n  onDrop = (acceptedFiles, rejectedFiles) => this.props.readFile(acceptedFiles[0])\n\n  render() {\n   return <Dropzone onDrop={this.onDrop}>\n      {({getRootProps, getInputProps, isDragActive}) => {\n        return (\n          <div\n            {...getRootProps()}\n            className={`dropzone ${isDragActive ? 'dropzone--isActive' : ''}` }\n          >\n            <input {...getInputProps()} />\n            {\n              isDragActive ?\n                <p>Drop files here...</p> :\n                <p>Try dropping some files here, or click to select files to upload.</p>\n            }\n          </div>\n        )\n      }}\n    </Dropzone>\n }\n}\n\nconst FormJson = props => {\n  const renderer = (subname, obj, iteration, setFieldValue, parentName) => {\n    const localInputName = (iteration === 0) ? subname : parentName+'.'+subname\n\n    console.log('render -> ', localInputName)\n\n    if(typeof obj == 'string'){\n      return <div>\n        <CustomField \n          type='text'\n          name={ localInputName }\n          setFieldValue={ setFieldValue }\n          label={ subname }\n          error={ [] }\n          placeholder={ subname } \n          value={ obj } />\n      </div>\n    }else if(Array.isArray(obj)){\n\n      return <div className='array-group'> {(iteration === 0 || iteration === 1) ? <div>\n        <h2>{subname}</h2>\n      </div> : (iteration === 2) ? <h4>{subname}</h4> : <p>{subname}</p>}\n\n      {obj.map((nameField, index) => <div key={localInputName+'-'+index}>\n          {renderer('['+index+']', obj[index], iteration + 1, setFieldValue, localInputName)}\n        </div>)\n      }</div>\n\n    }else if(typeof obj == 'object'){\n      \n      return <div> {(iteration === 0 || iteration === 1) ? <div>\n        <h2>{subname}</h2>\n      </div> : (iteration === 2) ? <h3>{subname}</h3> : <p>{subname}</p>}\n\n      {Object.keys(obj).map(nameField => <div>\n          {renderer(nameField, obj[nameField], iteration + 1, setFieldValue, localInputName)}\n        </div>)\n      }</div>\n    }else\n      return <div>error</div>\n  }\n\n  const InputForm = localProps => renderer('Form', localProps.initialValues, -1, localProps.setFieldValue, '')\n\n  return <div>\n    <Formik initialValues={props.initialValues}\n      onSubmit={(values, { setSubmitting }) => {\n        props.submitFinish(JSON.stringify(values))\n        setSubmitting()\n      }} >\n      {({ values, handleSubmit, isSubmitting, setFieldValue }) => (\n        <form onSubmit={handleSubmit}>\n          <InputForm initialValues={props.initialValues} setFieldValue={setFieldValue} />\n          <button className='default-btn' type='submit' disabled={isSubmitting}>Download new file</button>\n          <button className='reload-btn'onClick={ () => window.location.reload()}>New file</button>\n          <h1>Data Preview (JSON)</h1>\n          <br />\n          <div className='data-preview'>\n            {JSON.stringify(values)}\n          </div>\n          <br /><br /><br />\n        </form>\n      )}\n    </Formik>\n  </div>\n}\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      name: false,\n      jsonContent: {}\n    }\n  }\n\n  readFile = file => {\n    var success = content => this.setState({\n      name: file.name,\n      jsonContent: JSON.parse(content)\n    })\n    var fileReader = new FileReader()\n    fileReader.onload = evt => success( evt.target.result )\n    fileReader.readAsText( file )\n  }\n\n  submitFinish = text => {\n    var element = document.createElement('a');\n    element.setAttribute('href', 'data:text/plain;charset=utf-8,' + encodeURIComponent(text));\n    element.setAttribute('download', this.state.name);\n    element.style.display = 'none';\n    document.body.appendChild(element);\n    element.click();\n    document.body.removeChild(element);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <h1>Online JSON Editor</h1>\n        <br />\n        {Object.keys(this.state.jsonContent).length > 0 ? <FormJson\n          submitFinish={this.submitFinish}\n          initialValues={this.state.jsonContent}\n        /> : <FileDropzone readFile={this.readFile} />}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}